---
# generated using template templates/resources/integration.md.tmpl
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}

{{ if .HasExample -}}
## Example Usage
{{tffile "examples/resources/juju_integration/resource.tf"}}
{{- end }}

{{ .SchemaMarkdown | trimspace }}


### Notes
When creating this resource the `offer_url` property will show `(known after apply)` if a `name` or
 `name` and `endpoint` are supplied as below:
```
  + resource "juju_integration" "this" {
      + id    = (known after apply)
      + model = "this"
      + via   = "10.0.0.0/24,10.0.1.0/24"

      + application {
          + endpoint  = (known after apply)
          + name      = "one"
          + offer_url = (known after apply)
        }
    }
```
This is due to an integration requiring a name/endpoint combination or an offer_url, but not both
bits of data together.

#### Cross-model relations

From v0.23 of the provider, when integrating with an offer (i.e. when specifying the `offer_url`), the provider will create a remote application name with the format `<remote-app>-<local-app>-<interface>`. For example,
when relating a local application called `discourse` with an offer url of the form `admin/dbModel.postgresql`, using the `database` interface, the remote application will have the name `postgresql-discourse-database`.

In previous versions of the provider, the remote application would always have the same name as the application in the offer url, i.e. `postgresql` in the example above.

This ensures that local applications have a 1:1 relation with remote applications.

This change is backwards compatible and existing integrations will continue to work. However, take care when destroying integrations created by previous versions of the provider. If two apps relate the same remote application (e.g. if the offer provides multiple endpoints or two apps rely on the same offer/endpoint) and one of the integrations is removed, the other will also be affected.

Before v0.23:
```{mermaid}
flowchart LR
    A[App A] -->|Integrate| C(Remote APP)
    B[App B] -->|Integrate| C
    C -->|Cross Model| D[Offer]
    D--> E[App C]
```

After v0.23:
```{mermaid}
flowchart LR
    A[App A] -->|Integrate| C(Remote App 1)
    B[App B] -->|Integrate| D(Remote App 2)
    C -->|Cross Model| E[Offer]
    D -->|Cross Model| E[Offer]
    E--> F[App C]
```

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{codefile "shell" "examples/resources/juju_integration/import.sh"}}

Note that when importing an integration involving an offer URL, the remote application name
**must** begin with the name of the application in the offer URL. If an alias is used it must 
still conform to this but may include an additional suffix. For example, when consuming an
offer URL of `admin/dbModel.mysql` any alias must begin with `mysql`, e.g. `mysql` or `mysql-two`
in order for imports to the provider to work.
{{- end }}
